filter {
  if [fields][event][type] == "suricata" {
    date {
      match => [ "[timestamp]", "YYYY-MM-dd'T'HH:mm:ss.SSSSSSZ" ]
      remove_field => [ "[timestamp]" ]
    }
   # ruby {
   #   code => "if event['event_type'] == 'fileinfo'; event['fileinfo']['type']=event['fileinfo']['magic'].to_s.split(',')[0]; end;"
   # }
    mutate {
       remove_tag => [ "beats_input_codec_plain_applied" ]
    }
   # Parse JSON
    json {
      skip_on_invalid_json => true
      source => "message"
    }
    if [event_type] {
      mutate {
        rename => { "[event_type]" => "[event][subtype]" }
      }
    }
    if ![event][subtype] and [alert][signature_id] {
      mutate {
        add_field => { "[event][subtype]" => "alert" }
      }
    }
    if [event][subtype] != "alert" {
        drop {}
    }
    if [src_ip] {
      # Determine if traffic is multicast.
        cidr {
          address => [ "%{[src_ip]}" ]
          network => [ "224.0.0.0/4", "ff00::/8" ]
          add_tag => [ "multicast" ]
        }
    }
    if [dest_ip] {
      # Determine if traffic is multicast.
        cidr {
          address => [ "%{[dest_ip]}" ]
          network => [ "224.0.0.0/4", "ff00::/8" ]
          add_tag => [ "multicast" ]
        }
    }
#    if "multicast" in [tags] {
#       drop {}
#    }
   # Determine IP Version with CIDR checks.
    if [src_ip] {
      cidr {
        address => [ "%{[src_ip]}" ]
        network => [ "0.0.0.0/0" ]
        add_field => {
          "[ip_version]" => "IPv4"
        }
      }
      if ![ip_version] {
        cidr {
          address => [ "%{[src_ip]}" ]
          network => [ "::/0" ]
          add_field => {
            "[ip_version]" => "IPv6"
          }
        }
      }
    } else if [dest_ip] {
      cidr {
        address => [ "%{[dest_ip]}" ]
        network => [ "0.0.0.0/0" ]
        add_field => {
          "[ip_version]" => "IPv4"
        }
      }
      if ![ip_version] {
        cidr {
          address => [ "%{[dest_ip]}" ]
          network => [ "::/0" ]
          add_field => {
            "[ip_version]" => "IPv6"
          }
        }
      }
    }
 # Compress IPv6 addresses.
    if [ip_version] == "IPv6" {
      if [src_ip] {
        ruby {
          init => "
            require 'ipaddr'
          "
          code => "
            ip6addr = IPAddr.new(event.get('[src_ip]'))
            event.set('[src_ip]', ip6addr.to_s)
          "
        }
      }
      if [dest_ip] {
        ruby {
          init => "
            require 'ipaddr'
          "
          code => "
            ip6addr = IPAddr.new(event.get('[dest_ip]'))
            event.set('[dest_ip]', ip6addr.to_s)
          "
        }
      }
    }
# Set field to count ip-version
    if [ip_version] {
      mutate {
        add_field => { "ip_version_n" => "1" }
      }
    }
    if [ip_version] == "IPv6" {
      mutate {
        add_field => { "ip_version6_n" => "1" }
      }
    }
  # Set log.severity
    if [alert][severity] {
      translate {
        field => "[alert][severity]"
        destination => "[log][severity]"
        dictionary => {
          "1" => "alert"
          "2" => "critical"
          "3" => "warning"
          "4" => "notice"
        }
        fallback => "warning"
      }
    } else {
      mutate {
        replace => { "[log][severity]" => "informational" }
      }
    }

  # Populate alert.cve.
    if [alert][signature_id] {
      translate {
        dictionary_path => "/etc/logstash/dictionaries/suricata_cve.yml"
        field => "[alert][signature_id]"
        destination => "[alert][cve]"
      }
    }
  #Remove all field and white list some field
    prune {
      whitelist_names => [ "[alert][action]", "[alert][category]", "[alert][severity]", "[alert][signature]", "[alert][signature_id]", "[log][severity]" ]
    }
# Cleanup attack decriptions.
    if [alert][signature] {
      if [alert][signature] =~ /^ET DELETED .*$/ {
        mutate {
          gsub => [ "[alert][signature]", "^ET DELETED ", "" ]
        }
      } else if [alert][signature] =~ /^ET .*$/ {
        mutate {
          gsub => [ "[alert][signature]", "^ET ", "" ]
        }
      } else if [alert][signature] =~ /^SURICATA .*$/ {
        mutate {
          gsub => [ "[alert][signature]", "^SURICATA ", "" ]
        }
      } else if [alert][signature] =~ /^DELETED .*$/ {
        mutate {
          gsub => [ "[alert][signature]", "^DELETED ", "" ]
        }
      } else if [alert][signature] =~ /^CURRENT_EVENTS(?: -)? .*$/ {
        mutate {
          gsub => [ "[alert][signature]", "^CURRENT_EVENTS(?: -)? ", "" ]
        }
      }
    }
    mutate {
      convert => {
        "[src_port]" => "integer"
        "[dest_port]" => "integer"
        "[ip_version_n]" => "integer"
        "[ip_version6_n]" => "integer"
      }
      remove_field => [ "agent", "beat", "ecs", "input", "fields", "log", "offset", "message" ]
      rename => {
        "[fields][event][type]" => "[event][type]"
        "[agent][hostname]" => "[event][host]"
      }
    }
  }
}
